generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 大驼峰
// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  signature     String? // 签名
  email         String    @unique
  emailVerified DateTime?
  avatarUrl     String?

  accounts    Account[]
  sessions    Session[]
  videos      Video[]
  comments    Comment[]
  likes       Like[]
  collections Collected[]
  usertags    UserTag[]
  followers   Follow[]    @relation("follower")
  followings  Follow[]    @relation("following")
}

model Follow {
  createdAt DateTime @default(now())

  followerId  String
  followingId String

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id          String  @id @default(cuid())
  title       String
  description String?

  url      String
  coverUrl String

  createdAt DateTime  @default(now())
  deleteAt  DateTime?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments   Comment[] // 评论
  likes      Like[] // 点赞
  collecteds Collected[] // 收藏
  tags       Tag[] // 标签

  score BigInt // 推荐分数：点赞数  + 评论数 + 收藏数, 用定时任务更新

  @@index([id])
}

model Comment {
  id     String  @id @default(cuid())
  text   String  @db.Text
  imgUrl String?

  createdAt DateTime  @default(now())
  deleteAt  DateTime?

  commenter   User   @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  commenterId String

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String

  @@id([userId, videoId])
}

model Collected {
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String

  @@id([userId, videoId])
}

model Tag {
  id          String  @id @default(cuid())
  name        String
  description String?

  createdAt DateTime  @default(now())
  deleteAt  DateTime?

  videos   Video[]
  usertags UserTag[]
}

model UserTag {
  createdAt DateTime @default(now())
  score     BigInt // user 的 Tag 分数：点赞数  + 评论数 + 收藏数*2，用定时任务更新

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  @@id([userId, tagId])
}
