generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_in               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?

  name      String? @db.VarChar(30)
  bio       String?
  avatarUrl String?
  bannerUrl String?

  accounts    Account[]
  sessions    Session[]
  videos      Video[]
  comments    Comment[]
  likes       Like[]
  userTags    UserTag[]
  followers   Follow[]     @relation("follower")
  followings  Follow[]     @relation("following")
  collections Collection[]
}

model Follow {
  createdAt DateTime @default(now())

  followerId  String
  followingId String

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@id([followingId, followerId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id          String  @id @default(cuid())
  title       String
  description String?

  url      String
  coverUrl String

  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments    Comment[] // 评论
  likes       Like[] // 点赞
  tags        Tag[] // 标签
  collections Collection[] // 收藏

  score BigInt // 推荐分数：点赞数  + 评论数 + 收藏数, 用定时任务更新
}

model Comment {
  id     String  @id @default(cuid())
  text   String
  imgUrl String?

  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String
}

model Like {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@id([userId, videoId])
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String   @db.VarChar(30)

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  videos Video[]
}

model Tag {
  id          String  @id @default(cuid())
  name        String
  description String?

  createdAt DateTime @default(now())

  videos   Video[]
  usertags UserTag[]
}

model UserTag {
  createdAt DateTime @default(now())
  score     BigInt // user 的 Tag 分数：点赞数  + 评论数 + 收藏数*2，用定时任务更新

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  @@unique([userId, tagId])
}
