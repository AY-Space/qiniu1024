generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_in               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id        String  @id @default(cuid())
  name      String? @db.VarChar(30)
  email     String  @unique
  password  String  @default("")
  bio       String?
  avatarUrl String?
  bannerUrl String?

  accounts    Account[]
  videos      Video[]
  comments    Comment[]
  likes       Like[]
  userTags    UserTag[]
  followers   Follow[]     @relation("follower")
  followings  Follow[]     @relation("following")
  collections Collection[]
}

model Follow {
  createdAt   DateTime @default(now())
  followerId  String
  followingId String

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@id([followingId, followerId])
}

model Video {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  title       String
  description String?
  url         String
  coverUrl    String
  views       BigInt   @default(0)
  authorId    String

  author User @relation(fields: [authorId], references: [id])

  comments    Comment[] // 评论
  likes       Like[] // 点赞
  collections Collection[] // 收藏

  videoTags VideoTag[] // 视频标签
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      String
  imgUrl    String?
  authorId  String
  videoId   String
  likes     Int      @default(0)
  dislikes  Int      @default(0)

  author User  @relation(fields: [authorId], references: [id])
  video  Video @relation(fields: [videoId], references: [id])
}

model Like {
  createdAt DateTime @default(now())
  userId    String
  videoId   String

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id])

  @@id([userId, videoId])
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String   @db.VarChar(30)
  ownerId   String

  owner  User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  videos Video[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  videoTags VideoTag[]
  userTags  UserTag[]
}

model UserTag {
  createdAt DateTime @default(now())
  userId    String
  tagId     String
  score     BigInt // user 的 Tag 分数：点赞数  + 评论数 + 收藏数*2，用定时任务更新

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([userId, tagId])
}

model VideoTag {
  createdAt DateTime @default(now())
  videoId   String
  tagId     String
  score     BigInt // video 的 tag 分数：点赞数 + 评论数 + 收藏数*2，用定时任务更新

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([videoId, tagId])
}
